; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppName "Buzz_PCRS"
#define AppDisplayName "Buzz_PCRS"
#define AppExeName "Buzz_PCRS.exe"
#define AppPublisher "Dinova/DTIP/PCRS"
#define AppIconPath "assets\buzz_pcrs.ico"
#define AppSourcePath "dist\Buzz_PCRS\*"
#define OutputDir "dist"
#define AppRegKey "Software\Buzz_PCRS"
#define AppVersion "1.0.0"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{574290A2-EF7C-4845-85F3-BFF2F011A580}
AppName={#AppDisplayName}
AppVersion={#AppVersion}
DefaultDirName={autopf}\{#AppName}
DisableProgramGroupPage=yes
; (Un)comment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir={#OutputDir}
OutputBaseFilename={#AppDisplayName}-{#AppVersion}-windows
SetupIconFile={#AppIconPath}
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "portuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"
; below is the original line
;Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "installffmpeg"; Description: "Instalar FFmpeg (necess치rio para funcionamento)"; GroupDescription: "Componentes adicionais:"; Flags: checkedonce

[Files]
Source: {#AppSourcePath}; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "tools\curl.exe"; DestDir: "{tmp}"; Flags: deleteafterinstall
Source: "tools\7za.exe"; DestDir: "{tmp}"; Flags: deleteafterinstall

[Icons]
Name: "{autoprograms}\{#AppDisplayName}"; Filename: "{app}\{#AppExeName}"
Name: "{autodesktop}\{#AppDisplayName}"; Filename: "{app}\{#AppExeName}"; Tasks: desktopicon

[Run]
Filename: "{cmd}"; Parameters: "/c echo Instalando FFmpeg..."; Tasks: installffmpeg; BeforeInstall: DownloadFFmpeg; Flags: runhidden
Filename: "{app}\{#AppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(AppDisplayName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Registry]
Root: HKCU; Subkey: "{#AppRegKey}"; ValueType: string; ValueName: "ui-locale"; ValueData: "pt_BR"

[Code]
procedure DownloadFFmpeg();
var
  ResultCode: Integer;
  ErrorCode: Integer;
  FFmpegUrl: String;
  FFmpegZipFile: String;
  FFmpegDir: String;
  CurrentPath: String;
begin
  FFmpegUrl := 'https://github.com/GyanD/codexffmpeg/releases/download/7.1.1/ffmpeg-7.1.1-essentials_build.zip';
  FFmpegZipFile := ExpandConstant('{tmp}\ffmpeg.zip');
  FFmpegDir := ExpandConstant('{app}\ffmpeg');

  if FileExists(ExpandConstant('{app}\ffmpeg\bin\ffmpeg.exe')) then
    Exit;

  if not DirExists(FFmpegDir) then
    CreateDir(FFmpegDir);

  if not Exec(ExpandConstant('{tmp}\curl.exe'), 
         '-L "' + FFmpegUrl + '" -o "' + FFmpegZipFile + '"', 
         '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
  begin
    MsgBox('Falha ao baixar o FFmpeg. Erro: ' + IntToStr(ResultCode), mbError, MB_OK);
    Exit;
  end;

  if not Exec(ExpandConstant('{tmp}\7za.exe'), 
         'x "' + FFmpegZipFile + '" -o"' + FFmpegDir + '" -y', 
         '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
  begin
    MsgBox('Falha ao extrair o FFmpeg. Erro: ' + IntToStr(ResultCode), mbError, MB_OK);
    Exit;
  end;

  if DirExists(FFmpegDir + '\ffmpeg-7.1.1-essentials_build') then
  begin
    if not Exec(ExpandConstant('{cmd}'), 
           '/c xcopy "' + FFmpegDir + '\ffmpeg-7.1.1-essentials_build\*" "' + FFmpegDir + '" /E /Y', 
           '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      MsgBox('Falha ao mover arquivos do FFmpeg. Erro: ' + IntToStr(ResultCode), mbError, MB_OK);
      Exit;
    end;
  end;

  if RegQueryStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', CurrentPath) then
  begin
    if Pos(ExpandConstant('{app}\ffmpeg\bin'), CurrentPath) = 0 then
    begin
      if not RegWriteStringValue(HKEY_CURRENT_USER, 'Environment', 'Path',
                                 ExpandConstant('{app}\ffmpeg\bin;') + CurrentPath) then
      begin
        MsgBox('Falha ao adicionar FFmpeg ao PATH. O FFmpeg foi instalado, mas pode ser necess치rio adicionar manualmente ao PATH.', mbInformation, MB_OK);
      end;
    end;
  end
  else
  begin
    if not RegWriteStringValue(HKEY_CURRENT_USER, 'Environment', 'Path',
                               ExpandConstant('{app}\ffmpeg\bin;')) then
    begin
      MsgBox('Falha ao criar o PATH de ambiente. O FFmpeg foi instalado, mas pode ser necess치rio adicion치-lo manualmente ao PATH.', mbInformation, MB_OK);
    end;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usPostUninstall then
  begin
    if RegKeyExists(HKEY_CURRENT_USER, '{#AppRegKey}') then
      if MsgBox('Do you want to delete {#AppDisplayName} settings?', mbConfirmation, MB_YESNO) = IDYES then
        RegDeleteKeyIncludingSubkeys(HKEY_CURRENT_USER, '{#AppRegKey}');
  end;
end;

procedure DeleteFileOrFolder(FilePath: string);
begin
  if FileExists(FilePath) then
    DeleteFile(FilePath)
  else if DirExists(FilePath) then
    DelTree(FilePath, True, True, True);
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssInstall then
  begin
    DeleteFileOrFolder(ExpandConstant('{app}\Buzz.exe'));
    DeleteFileOrFolder(ExpandConstant('{app}\_internal'));
  end;
end;